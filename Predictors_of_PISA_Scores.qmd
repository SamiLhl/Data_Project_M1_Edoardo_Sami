---
title: "Predictors_of_PISA_Scores"
author: "Edoardo Ruvolo and Sami Louahlia"
format: html
---

```{r}
here::i_am("Data_Project_M1_Edoardo_Sami.Rproj")
library(here)
library(ggplot2)
library(dplyr)
library(vroom)
library(tidyr)
```

### Data Loading 
Data files are small yet numerous, fortunately, there are only so many ways organizations can name countries so joining the files is not too challenging.

## UNESCO Data
```{r}
Survival_Rate <- vroom(here("Data_UNESCO_21_11/Survival_Rate.csv"))
Share_Studs_Priv <- vroom(here("Data_UNESCO_21_11/Share_Priv_lowsec.csv"))
Enrolment <- vroom(here("Data_UNESCO_21_11/Tot_Enrol_Rate_Lowsec.csv"))

Start_Yr <- vroom(here("Data_UNESCO_21_11/Start_Month_Acad.csv"))
End_Yr <- vroom(here("Data_UNESCO_21_11/End_Month_Acad.csv"))

Gov_Exp <- vroom(here("Data_UNESCO_21_11/Gov_Exp_GDP.csv"))

MeanSchooling <- vroom(here("Data_UNESCO_21_11/Mean_Yrs_Schooling.csv"))
EntranceAge <- vroom(here("Data_UNESCO_21_11/Entrance_Age.csv"))

```

## World Bank Data

```{r}
Pop_Density <- vroom(here("WB_Data/Reworked_Density.csv"))
Fertility_Rate <- read.csv(here("WB_Data/Population Fertility.csv"), col.names =c("Country Code","Indicator Name","Indicator Code", "1960", "1961", "1962", "1963", "1964", "1965", "1966", "1967", "1968", "1969", "1970","1971","1972","1973","1974","1975","1976","1977","1978","1979","1980","1981","1982","1983","1984","1985","1986","1987","1988","1989","1990","1991","1992","1993","1994","1995","1996","1997","1998","1999","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2015","2016","2017","2018","2019","2020","2021","2022","Country_Name"),skip = 4)

```
The method is not great I admit but R was unable to understand the variables on its own.I commited a crime but this was the only way out. I will find a solution later on.


Notes for later :
- When UNESCO data are aggregated in regional form they don't have a name in character but a number, so it should be easy to rid or separate with a is.number or something of that kind
- Some of the data, notably Illiteracy seem to have different indicators name so we need to ensure that it is the same thing or else separate them in different parts

Due to UNESCO website being fucked up I cannot select the 2000 time period when I select only a few years. So for now I provide the 2009 and 2018 data, with for some data a 3 year range that we could mean, in case there are no data for 2009 or 2018 but some data before or after

- Most of the data has a 'value' to show the value, problem is we would end up with a whole lot of 'values' so need to rename all this probably at the end of each datasets treatment, right before joining everything
- Some variable are duplicated(Share_Studs_Priv has twice Time as well as ALL the UNESCO data), we will need to rid of them
- Might be good to quickly turn Start and End of Year data sets into one so we can acquire the info we want out of it, namely the duration of a school year.

CAREFUL The data is sometimes way too massive compared to what we want to study, so some of the treatment will need to be done separately for each variables.


### Data treatment 
--> All the UNESCO data are structured the same way, as such we can create a function to treat them efficiently
We need to :
- Rid ourselves of the Flag and Flag ID and NATMON var as they are empty and/or uninformative
- filter the 2018 and 2009 obs into two separate ones?
- Get rid of one of the Time variable to reduce redundancy
- We should keep the Country_Tag and put the country name associated into a separate file. This however, needs not to be done all the time. Only once.


--> The Pop_Density could be treated to only keep the Y2009 and the Y2018

--> For birth rate we could decide to keep only an average value over some time


```{r}
UNESCO_Treatment <- function(Data){
  Data <- Data |> select(-`Flag Codes`, - Flags, - NATMON_IND, -TIME)
}
```

```{r}
Country_Code <- MeanSchooling |> distinct(LOCATION, Country) |> rename(Country_Code = LOCATION, Country = Country)
```
Good thing is that it allows to see how many countries are available with the Meanschooling data 
I will check if we get different nb with other datasets


```{r First look at Gov_Exp}
Gov_ExpT <- UNESCO_Treatment(Gov_Exp)
Gov_ExpT <- Gov_ExpT |> filter(Indicator == "Government expenditure on lower secondary education as a percentage of GDP (%)")

Country_Code_test <- Gov_ExpT |> distinct(LOCATION)

## Gov_Exp2009 <- GovExpT |> filter (Time == 2009)
## Gov_Exp2018 <- GovExpT |> filter (Time == 2018)

EnrolmentT <- UNESCO_Treatment(Enrolment)
EnrolmentT <- EnrolmentT |> filter(Indicator == "Total net enrolment rate, lower secondary, both sexes (%)")

MeanSchoolingT <- UNESCO_Treatment(MeanSchooling)
MeanSchoolingT <- MeanSchoolingT |> filter(Indicator == "Mean years of schooling (ISCED 1 or higher), population 25+ years, both sexes")

Share_Studs_PrivT <- UNESCO_Treatment(Share_Studs_Priv)
Share_Studs_PrivT <- Share_Studs_PrivT |> filter(Indicator =="Percentage of enrolment in lower secondary education in private institutions (%)")

Survival_RateT <- UNESCO_Treatment(Survival_Rate)
Survival_RateT <- Survival_RateT |> filter(Indicator == "Survival rate to the last grade of primary education, both sexes (%)")

EntranceAgeT <- UNESCO_Treatment(EntranceAge)
EntranceAgeTearly <- EntranceAgeT |> filter(Indicator == "Official entrance age to early childhood education (years)")

EntranceAgeT_Dev <- EntranceAgeT |> filter(Indicator == "Official entrance age to early childhood educational development (years)")

EntranceAgeTmanda <- EntranceAgeT |> filter(Indicator == "Official entrance age to compulsory education (years)")


```

I am uncertain as to what to do about the entrance age. In fact there two interesting variables. 
-> one on the age of compulsory education 
-> one on the age where schooling starts (like when you are 3 in France for instance)

There is one more country when testing between nb of tags in Mean Schooling and Gov Exp WE MIGHT NEED TO SEE ABOUT THAT. PERHAPS ADD THE MISSING COUNTRIES AS WE ANALYZE MORE VARS


Template to get 2009 and 2018 data 
## DATA_NAME2009 <- DATA |> filter (Time == 2009)
## DATA_NAME2018 <- DATA |> filter (Time == 2018)

Template to get the Country_Codes : Country_Code_test <- DATA |> distinct(LOCATION)

