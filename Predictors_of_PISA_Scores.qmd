---
title: "Predictors_of_PISA_Scores"
author: "Edoardo Ruvolo and Sami Louahlia"
format: html
execute:
  message: false
  warning: false
code-fold: true

---

```{r}
#| message: false
#| echo: false
here::i_am("Data_Project_M1_Edoardo_Sami.Rproj")
library(here)
library(ggplot2)
library(dplyr)
library(vroom)
library(tidyr)
```

## Research Project : Exploratory analysis of potential predictors of PISA Scores

[Link to the Github Repository](https://github.com/SamiLhl/Data_Project_M1_Edoardo_Sami) 

Research Question: 

## Data Acquisition

This section summarizes how the different data sets were acquired. We had to access open data from three major international organizations: the World Bank, the OECD and the UN under its UNESCO mandate. 

### World Bank:
All we had to do was to download the CSV which was an option on the first page when accessing the data page.

- [Population Density](https://data.worldbank.org/indicator/EN.POP.DNST): Measure of countries’ population per square kilometers.

- [Fertility Rates](https://data.worldbank.org/indicator/SP.DYN.TFRT.IN): Measure of the number of births per woman. A fertility rate of 2 indicates natural replacement of the population. 

- [GDP](https://databank.worldbank.org/reports.aspx?source=2&series=NY.GDP.MKTP.CD&country=):
Measure of the total monetary value of all final goods and services produced within a country in a specific time period.

- [GNI per capita](https://databank.worldbank.org/reports.aspx?source=2&series=NY.GNP.PCAP.PP.CD&country=): 
Measure of the total income earned by a country's residents, plus, the net inflow of primary income (comprising compensation received by employees and income from property) from abroad.

### PISA: 
All the variables were acquired in one go, using the [PISA Data Explorer](https://pisadataexplorer.oecd.org/ide/idepisa/) 

- Step 1 Selecting Criteria: We selected the Reading, Mathematics and Science variable, selected the 4 time periods we are using 2018, 2015, 2012, 2009, selected the three ‘measures’: PISA Reading, Mathematics and Science Scale Overall. And took the OECD and partners groups.

- Step 2 Select Variables : We selected the All students and Student (standardized) Gender variables.

- Step 3 + 4 Edit and Build Reports: We did not change anything to the default options which gives 6 different reports. We got the data explorer to build the reports and we go to download them. 

### UNESCO:
The [UNESCO Interface](http://data.uis.unesco.org/) allows one to select the variables needed. In our case we found all our data in the path: 
Education -> Other policy relevant indicators. 

-	Enrolment rate: Number of students and enrolment/attendance by level of education  -> Enrolment ratios  ->  Total net enrolment rate by level of education 

-	Entrance age: Official entrance age and theoretical duration by level of education (years) -> Official entrance age 

-	Start_Yr + End_Yr: Start and end of academic school year (month, year)

-	Government Expenditure: Government expenditure on education as a percentage of GDP

-	Mean Schooling: Mean Years of Schooling 

-	Share of Students in Private: Percentage of enrolment in private institutions by level of education -> Distribution of enrolment by type of institution

-	Survival Rate: Survival rate by grade for primary education -> Survival rate in primary education

After accessing each of the dataset it is necessary to customize the data, using the customize tool and selecting the time option, selecting only the 2009, 2012, 2015, 2018 observations. Finally we export in CSV format.


## Data Loading 
Data files are small yet numerous, fortunately, there are only so many ways organizations can name countries so joining the files is not too challenging.

### Data on Educational Attainments
Source: UNESCO
Avalaible at the link [here](http://data.uis.unesco.org)
```{r}
Survival_Rate <- vroom(here("Data_UNESCO_28_11/Survival_Rate.csv"))
Share_Studs_Priv <- vroom(here("Data_UNESCO_28_11/Share_Private.csv"))
Enrolment <- vroom(here("Data_UNESCO_28_11/Enrolment_Rate.csv"))

Start_End_Yr <- vroom(here("Data_UNESCO_28_11/Start_End_Yr.csv"))

Gov_Exp <- vroom(here("Data_UNESCO_28_11/Gov_Exp.csv"))

MeanSchooling <- vroom(here("Data_UNESCO_28_11/Mean_Yr_Schooling.csv"))
EntranceAge <- vroom(here("Data_UNESCO_28_11/Entrance_Age.csv"))
```


### Data on Population Density and Fertility rate
Source : WORLD BANK
Avalaible at the link [here](https://databank.worldbank.org/reports.aspx?source=2&series=EN.POP.DNST&country=) and [here](https://databank.worldbank.org/reports.aspx?source=2&series=SP.DYN.TFRT.IN&country=)
```{r}
Pop_Density <- vroom(here("WB_Data/Reworked_Density.csv"))
Fertility_Rate <- vroom(here("WB_Data/Population Fertility.csv"))
```

### Data on GNI per capita 
Source : WORLD BANK
GNI per capita, PPP (current international $)
Avalaible at the link [here](https://databank.worldbank.org/reports.aspx?source=2&series=NY.GNP.PCAP.PP.CD&country=)
```{r}
GNI_percapita <- vroom(here("HI_Data/data1.csv"))
```
### Data on GDP 
Source: WORLD BANK
Avalaible at the link [here](https://databank.worldbank.org/reports.aspx?source=2&series=NY.GDP.MKTP.CD&country=)
```{r}
GDP_growth <- vroom(here("GDP_data/data2.csv"))
```

### Data on Pisa score 
Source : OECD 
Avalaible at the link [here](https://www.oecd.org/pisa/data/2018database/#d.en.516012)
```{r}
Pisa_score_readingscale <- vroom(here("Pisa_Score/Readingscale.csv"))
Pisa_score_readingscale_gender <- vroom(here("Pisa_Score/Readingscale_gender.csv"))
Pisa_score_Mathscale <- vroom(here("Pisa_Score/Mathscale.csv"))
Pisa_score_Mathscale_gender <- vroom(here("Pisa_Score/Mathscale_gender.csv"))
Pisa_score_Sciencescale <- vroom(here("Pisa_Score/Sciencescale.csv"))
Pisa_score_Sciencescale_gender <- vroom(here("Pisa_Score/Sciencescale_gender.csv"))
```


In the PISA data, R recognizes none of the variables as numbers but all as chr. Modifications are necessary. We also need to assign the years to each of the data set.

Notes for later : MUST LOOK AT THIS
- When UNESCO data are aggregated in regional form they don't have a name in character but a number, so it should be easy to rid or separate with a is.number or something of that kind


## Data treatment + variable description
In this section, we format our datasets and proceed with some intermediate merging. We then describe the variables of these intermediate datasets.

### UNESCO DATA
  All the UNESCO data are structured the same way, as such we can create a function to treat them efficiently
We rid ourselves of the Flag, Flag ID and NATMON var as they are empty and/or uninformative. We also get rid of one of the Time variable to reduce redundancy. After treatment to only keep the data associated to our group of interest (generally students at the lower secondary level) and after assigning the "value" variables a more recognizable name we get rid of the LOCATION, and Value variables. We then join all the data sets into one big UNESCO dataset using as common variable both time and country name.


```{r}
UNESCO_Treatment <- function(Data){
  Data <- Data |> select(-`Flag Codes`, - Flags, - NATMON_IND, -TIME, -LOCATION)
}
```


```{r Treating the Data}
Gov_Exp <- UNESCO_Treatment(Gov_Exp)
Gov_Exp <- Gov_Exp |> filter(Indicator == "Government expenditure on lower secondary education as a percentage of GDP (%)") |> mutate(Gov_Expenditure = Value) |> select(-Value, -Indicator)


Enrolment <- UNESCO_Treatment(Enrolment)
Enrolment <- Enrolment |> filter(Indicator == "Total net enrolment rate, lower secondary, both sexes (%)")|> mutate(Enrolment_Rate = Value) |> select(-Value, -Indicator)

MeanSchooling <- UNESCO_Treatment(MeanSchooling)
MeanSchooling <- MeanSchooling |> filter(Indicator == "Mean years of schooling (ISCED 1 or higher), population 25+ years, both sexes")|> mutate(Mean_Yrs_Schooling = Value) |> select(-Value, -Indicator)

Share_Studs_Priv <- UNESCO_Treatment(Share_Studs_Priv)
Share_Studs_Priv <- Share_Studs_Priv |> filter(Indicator =="Percentage of enrolment in lower secondary education in private institutions (%)")|> mutate(Share_Private = Value) |> select(-Value, -Indicator)

Survival_Rate <- UNESCO_Treatment(Survival_Rate)
Survival_Rate <- Survival_Rate |> filter(Indicator == "Survival rate to the last grade of primary education, both sexes (%)")|> mutate(Survival_Rate_Primary = Value) |> select(-Value, -Indicator)

EntranceAge <- UNESCO_Treatment(EntranceAge)
EntranceAgeEarly <- EntranceAge |> filter(Indicator == "Official entrance age to early childhood education (years)")|> mutate(EntranceEarly = Value) |> select(-Value, -Indicator)
EntranceAgeManda <- EntranceAge |> filter(Indicator == "Official entrance age to compulsory education (years)")|> mutate(Entrance_Mandatory = Value) |> select(-Value, -Indicator)

Start_Yr <- UNESCO_Treatment(Start_End_Yr) |> filter(Indicator == "Start month of the academic school year (pre-primary to post-secondary non-tertiary education)")|> mutate(Start_Month = Value) |> select(-Value, -Indicator)
End_Yr <- UNESCO_Treatment(Start_End_Yr) |> filter(Indicator == "End month of the academic school year (pre-primary to post-secondary non-tertiary education)")|> mutate(End_Month = Value) |> select(-Value, -Indicator)

```

```{r Joining UNESCO}
UNESCO <- Gov_Exp |>
  left_join(Enrolment, by = c("Country","Time")) |>
  left_join(EntranceAgeEarly, by = c("Country","Time")) |>
  left_join(EntranceAgeManda, by = c("Country","Time")) |>
  left_join(End_Yr, by = c("Country","Time")) |>
  left_join(Start_Yr, by = c("Country","Time")) |>
  left_join(Share_Studs_Priv, by = c("Country","Time")) |>
  left_join(MeanSchooling, by = c("Country","Time")) |>
  left_join(Survival_Rate, by = c("Country","Time")) 
```

Government Expenditure: Government expenditure in lower secondary education as a share of GDP (%)

Enrolment : Share of the population at the corresponding age effectively attending lower secondary education (%) 
Entrance Age:
- Early: Age at which it is possible to put children into schooling.
- Mandatory: Age at which it is mandated to put children into schooling.

Start and End year: Start and End month of the school year. Allows to measure length of the academic year.

Share of Students in Private: Share of students attending a private institution.

Mean Schooling: Mean number of years attended by the national adult population

Survival Rate: Share of primary school pupils, within a cohort, who successfully pass to the next grade (a proxy for school retention)


### World Bank Data
Some small changes in the csv file were needed again for the Fertility Rate data set to make it properly readable. Mostly, it required putting a _ on the variable names and getting rid of the first information provided in the .csv that were telling that it was WB data and its date of change. Once rid of these the file works. Otherwise we are doomed to commit some sort of felony.

There are only a few datasets from the WB treating them is quicker
```{r}
Fertility_Rate <- Fertility_Rate |> select("Country Name", "Country Code", "Indicator Name", "2009", "2012", "2015", "2018")
Pop_Density <- Pop_Density |> select(Country_Name, Country_Code, Indicator_Name, Y2009, Y2012, Y2015, Y2018) |> rename( "2009" ="Y2009", "2012"="Y2012", "2015"="Y2015", "2018"="Y2018")|> rename( "Country Name" ="Country_Name", "Country Code"="Country_Code") 
```

### GNI_percapita cleaning. 
No particular cleaning done in the Household Income data, just a minor adjustment in the cvs file, in order to be readable in rstudio. 
The indicator columns is eliminated, as it is unnecessary for our analysis.
```{r}
GNI_percapita <- GNI_percapita |> select("Country Name", "Country Code", "Indicator Name", "2009", "2012", "2015", "2018")
```

### GDP_growth cleaning.
No particular cleaning done in the GDP dataset, just a minor adjustment in the cvs file, in order to be readable in rstudio. 
Few years are eliminated, as they are unnecessary for our analysis.
```{r}
GDP_growth <- GDP_growth |>
  select("Country Name", "Country Code", "Indicator Name", "2009", "2012", "2015", "2018")
```

We then join all the data sets into one big WB dataset using as common variable both Country Name and Country Code
```{r}
WB <- Fertility_Rate |>
  left_join(Pop_Density, by = c("Country Name", "Country Code")) |>
  left_join(GNI_percapita, by = c("Country Name", "Country Code")) |>
  left_join(GDP_growth, by = c("Country Name", "Country Code"))
```

I also tried to do it by pivoting the data so they could merge by year, i leave a small example, we can get of rid of it. 
```{r}
GDP_growth_long <- GDP_growth %>%
  pivot_longer(cols = starts_with("20"),  
               names_to = "Year",
               values_to = "Value")
```

```{r}
Fertility_Rate_long <- Fertility_Rate %>%
  pivot_longer(cols = starts_with("20"),  
               names_to = "Year",
               values_to = "Value")
Pop_Density_long <- Pop_Density %>%
  pivot_longer(cols = starts_with("20"),  
               names_to = "Year",
               values_to = "Value")
```

```{r}
GNI_long <- GNI_percapita %>%
  pivot_longer(cols = starts_with("20"),  
               names_to = "Year",
               values_to = "Value")

```

```{r}
WB_long <- Fertility_Rate_long |>
  left_join(Pop_Density_long, by = c("Country Name", "Country Code", "Year")) |>
  left_join(GNI_long, by = c("Country Name", "Country Code", "Year")) |>
  left_join(GDP_growth_long, by = c("Country Name", "Country Code", "Year"))
```

I tried both versions, idk which one we prefer, personally i prefer the WB and not the WB_long
### OECD (PISA) Data
The PISA score were formatted in similar ways, where possible, we used functions to modify the data, however, due to the different variables, in some cases we performed the operations at the dataset level. We started our data cleaning by simplifing the names in the different datasets, and removing the STANDARD ERROR column, as it is outside the scope of our analysis. 
```{r}
Pisa_score_Mathscale <- Pisa_score_Mathscale |> rename("Math_Score"="Average(all_students)") |> fill(`Year/Study`)|> select(-`Standard Error`)
Pisa_score_Mathscale_gender <- Pisa_score_Mathscale_gender |>  fill(`Year/Study`)|>select(-`Standard Error M`, -`Standard Error F`)
Pisa_score_readingscale <- Pisa_score_readingscale |> rename("Reading_Score"="Average(all_students)") |> fill(`Year/Study`) |>select(-`Standard Error`)
Pisa_score_readingscale_gender <- Pisa_score_readingscale_gender |> fill(`Year/Study`) |>select(-`Standard Error M`, -`Standard Error F`)
Pisa_score_Sciencescale <- Pisa_score_Sciencescale |> rename("Science_Score"="Average(all_students)") |> fill(`Year/Study`) |>select(-`Standard Error`)
Pisa_score_Sciencescale_gender <- Pisa_score_Sciencescale_gender |>  fill(`Year/Study`)|>select(-`Standard Error M`, -`Standard Error F`)


```

Once solved the issues, we worked clean the dataset that would make sure that the scores were numeric variable and where this was not the case to substitute it with NA. 

```{r}

Pisa_score_Mathscale$Math_Score <- iconv(Pisa_score_Mathscale$Math_Score, to="UTF-8", sub = NA)
Pisa_score_Mathscale_gender$Math_Score_M <- iconv(Pisa_score_Mathscale_gender$Math_Score_M, to="UTF-8", sub = NA)
Pisa_score_Mathscale_gender$Math_Score_F <- iconv(Pisa_score_Mathscale_gender$Math_Score_F, to="UTF-8", sub = NA)
Pisa_score_readingscale$Reading_Score <- iconv(Pisa_score_readingscale$Reading_Score, to="UTF-8", sub = NA)
Pisa_score_readingscale_gender$Reading_Score_M <- iconv(Pisa_score_readingscale_gender$Reading_Score_M, to="UTF-8", sub = NA)
Pisa_score_readingscale_gender$Reading_Score_F <- iconv(Pisa_score_readingscale_gender$Reading_Score_F, to="UTF-8", sub = NA)
Pisa_score_Sciencescale$Science_Score <- iconv(Pisa_score_Sciencescale$Science_Score, to="UTF-8", sub = NA)
Pisa_score_Sciencescale_gender$Science_Score_M <- iconv(Pisa_score_Sciencescale_gender$Science_Score_M, to="UTF-8", sub = NA)
Pisa_score_Sciencescale_gender$Science_Score_F <- iconv(Pisa_score_Sciencescale_gender$Science_Score_F, to="UTF-8", sub = NA)
```

Since all the data have a similar structure, we created a function that remove the last four observation which contained the source of the data set (OECD) and some notes about the aggregation of the data set. We used the same function to make the year as a numeric variable, to make aggregation easier.

```{r}

PISA_treatment <- function(data) {
  if (nrow(data) <= 4) {
    warning("Number of observations to remove exceeds the total number of observations.")
    return(NULL)
  }
  modified_data <- head(data, -4)
  
  modified_data$`Year/Study` <- as.numeric(modified_data$`Year/Study`)
  
  return(modified_data)
}
```

```{r}

Pisa_score_Mathscale <- PISA_treatment(Pisa_score_Mathscale)
Pisa_score_Mathscale_gender <-PISA_treatment(Pisa_score_Mathscale_gender)
Pisa_score_readingscale <- PISA_treatment(Pisa_score_readingscale)
Pisa_score_readingscale_gender <- PISA_treatment(Pisa_score_readingscale_gender)
Pisa_score_Sciencescale <- PISA_treatment(Pisa_score_Sciencescale)
Pisa_score_Sciencescale_gender <- PISA_treatment(Pisa_score_Sciencescale_gender)
```

Important note: Some countries, namely (Albania, Argentina, Kazakhstan and Malaysia), experience unusual scores in 2015 and for this reason were reported separately from the rest of the observation. Considering the situation, we decided to validate the score of 2015 and and so placing it back in its original position, we have done so by a modification in the cvs file. 

For the aggregation of the dataset, we opted for two differentiated one, the first one is a comparison of the three categories (Science, Math and Reading) over the years. While the second one, is the same comparison taking in consideration gender distribution. 

```{r}
PISA <- Pisa_score_Mathscale |>
  left_join(Pisa_score_readingscale, by = c("Jurisdiction", "Year/Study")) |>
  left_join(Pisa_score_Sciencescale, by = c("Jurisdiction", "Year/Study"))

PISA_gender <- Pisa_score_Mathscale_gender |>
  left_join(Pisa_score_readingscale_gender, by = c("Jurisdiction", "Year/Study")) |>
  left_join(Pisa_score_Sciencescale_gender, by = c("Jurisdiction", "Year/Study"))
```

```{r}
PISA <- PISA |>
  pivot_wider(names_from = `Year/Study`,
              values_from = c("Math_Score","Reading_Score", "Science_Score"))
```

```{r}
PISA_gender <- PISA_gender |>
  pivot_wider(names_from = `Year/Study`,
              values_from = c("Math_Score_M","Reading_Score_M", "Science_Score_M", "Math_Score_F","Reading_Score_F", "Science_Score_F"))
```



## Presentation of the dataset and variable explainantion

Lastly, in order to have a clearer display of our datasets, we created a function that would return the name of the variables in the datasets, the number of rows and columns for each observation and a small comment. 

```{r}

get_dataset_info <- function(dataset) {
  num_rows <- nrow(dataset)
  num_cols <- ncol(dataset)
  variable_names <- names(dataset)
  info_table <- data.frame(
    "Number of Rows" = num_rows,
    "Number of Columns" = num_cols,
    "Variable Names" = paste(variable_names, collapse = ", ")
  )
  return(info_table)
}
```

```{r}
result <- get_dataset_info(GNI_percapita)
names(result) <- c("Rows", "Columns", "Variable Names")
knitr::kable(result, caption = "Number of Rows, Number of Columns, Name of the Variable")
```
This indicator offers the per-person measurement of Gross National Income (GNI, previously known as GNP) in current international dollars, adjusted by a purchasing power parity (PPP) conversion factor. 
We decided to keep the Country Name and Country Code to identify unequivocally the countries. 
The Indicator name that define the type of measurement and lastly the observation from 2009 to 2022.

```{r}
result <- get_dataset_info(UNESCO)
names(result) <- c("Rows", "Columns", "Variable Names")
knitr::kable(result, caption = "Number of Rows, Number of Columns, Name of the Variable")
```


