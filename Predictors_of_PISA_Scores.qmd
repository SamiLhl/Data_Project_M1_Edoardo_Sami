---
title: "Predictors_of_PISA_Scores"
author: "Edoardo Ruvolo and Sami Louahlia"
format: html
---

```{r}
#| message: false
#| echo: false
here::i_am("Data_Project_M1_Edoardo_Sami.Rproj")
library(here)
library(ggplot2)
library(dplyr)
library(vroom)
library(tidyr)
```

### Data Loading 
Data files are small yet numerous, fortunately, there are only so many ways organizations can name countries so joining the files is not too challenging.

<<<<<<< HEAD
## UNESCO Data
=======
## Data on Educational Attainments
Source: UNESCO
Avalaible at the link [here](http://data.uis.unesco.org)
```{r}
Survival_Rate <- vroom(here("Data_UNESCO_21_11/Survival_Rate.csv"))
Share_Studs_Priv <- vroom(here("Data_UNESCO_21_11/Share_Priv_lowsec.csv"))
Enrolment <- vroom(here("Data_UNESCO_21_11/Tot_Enrol_Rate_Lowsec.csv"))

Start_Yr <- vroom(here("Data_UNESCO_21_11/Start_Month_Acad.csv"))
End_Yr <- vroom(here("Data_UNESCO_21_11/End_Month_Acad.csv"))

Gov_Exp <- vroom(here("Data_UNESCO_21_11/Gov_Exp_GDP.csv"))

MeanSchooling <- vroom(here("Data_UNESCO_21_11/Mean_Yrs_Schooling.csv"))
EntranceAge <- vroom(here("Data_UNESCO_21_11/Entrance_Age.csv"))
```


## Data on Population Density and Fertility rate
Source : WORLD BANK
Avalaible at the link [here](https://databank.worldbank.org/reports.aspx?source=2&series=EN.POP.DNST&country=) and [here](https://databank.worldbank.org/reports.aspx?source=2&series=SP.DYN.TFRT.IN&country=)
```{r}
Pop_Density <- vroom(here("WB_Data/Reworked_Density.csv"))
Fertility_Rate <- read.csv(here("WB_Data/Population Fertility - Copie.csv"))
```
## Data on GNI per capita 
Source : WORLD BANK
GNI per capita, PPP (current international $)
Avalaible at the link [here](https://databank.worldbank.org/reports.aspx?source=2&series=NY.GNP.PCAP.PP.CD&country=)
```{r}
GNI_percapita <- vroom(here("HI_Data/data1.csv"))
```

### Data on Pisa score 
Source : OECD 
Avalaible at the link [here](https://www.oecd.org/pisa/data/2018database/#d.en.516012)
```{r}
Pisa_score_readingscale <- vroom(here("Pisa_Score/Readingscale.csv"))
Pisa_score_readingscale_gender <- vroom(here("Pisa_Score/Readingscale_gender.csv"))
Pisa_score_Mathscale <- vroom(here("Pisa_Score/Mathscale.csv"))
Pisa_score_Mathscale_gender <- vroom(here("Pisa_Score/Mathscale_gender.csv"))
Pisa_score_Sciencescale <- vroom(here("Pisa_Score/Sciencescale.csv"))
Pisa_score_Sciencescale_gender <- vroom(here("Pisa_Score/Sciencescale_gender.csv"))
```

Right now R recognizes none of the variables a number but all as chr. Modifications are necessary. Good thing however is that all the vars are useful. We need to assign the years to each of the data set but as they are of the exact same length we only need to know how many obs there is for each year in one data to know for the rest.

Notes for later :
- When UNESCO data are aggregated in regional form they don't have a name in character but a number, so it should be easy to rid or separate with a is.number or something of that kind
- Some of the data, notably Illiteracy seem to have different indicators name so we need to ensure that it is the same thing or else separate them in different parts
- Most of the data has a 'value' to show the value, problem is we would end up with a whole lot of 'values' so need to rename all this probably at the end of each datasets treatment, right before joining everything
- Some variable are duplicated(Share_Studs_Priv has twice Time as well as ALL the UNESCO data), we will need to rid of them
- Might be good to quickly turn Start and End of Year data sets into one so we can acquire the info we want out of it, namely the duration of a school year.

For now I provide the 2009 and 2018 data, with for some data a 3 year range that we could mean, in case there are no data for 2009 or 2018 but some data before or after


CAREFUL The data is sometimes way too massive compared to what we want to study, so some of the treatment will need to be done separately for each variables.


### Data treatment 

## UNESCO DATA
--> All the UNESCO data are structured the same way, as such we can create a function to treat them efficiently
We need to :
- Rid ourselves of the Flag and Flag ID and NATMON var as they are empty and/or uninformative
- filter the 2018 and 2009 obs into two separate ones?
- Get rid of one of the Time variable to reduce redundancy
- We should only keep the country name as it is what is put in PISA so we can join easily afterwards


--> The Pop_Density could be treated to only keep the Y2009 and the Y2018

--> For birth rate we could decide to keep only an average value over some time


```{r}
UNESCO_Treatment <- function(Data){
  Data <- Data |> select(-`Flag Codes`, - Flags, - NATMON_IND, -TIME)
}
```

```{r}
Country_Code <- MeanSchooling |> distinct(LOCATION, Country) |> rename(Country_Code = LOCATION, Country = Country)
```
Good thing is that it allows to see how many countries are available with the Meanschooling data 
I will check if we get different nb with other datasets


```{r First look at Gov_Exp}
Gov_ExpT <- UNESCO_Treatment(Gov_Exp)
Gov_ExpT <- Gov_ExpT |> filter(Indicator == "Government expenditure on lower secondary education as a percentage of GDP (%)")

Country_Code_test <- Gov_ExpT |> distinct(LOCATION)

#Gov_Exp2009 <- Gov_ExpT |> filter (Time == 2009)
#Gov_Exp2018 <- Gov_ExpT |> filter (Time == 2018)

EnrolmentT <- UNESCO_Treatment(Enrolment)
EnrolmentT <- EnrolmentT |> filter(Indicator == "Total net enrolment rate, lower secondary, both sexes (%)")

MeanSchoolingT <- UNESCO_Treatment(MeanSchooling)
MeanSchoolingT <- MeanSchoolingT |> filter(Indicator == "Mean years of schooling (ISCED 1 or higher), population 25+ years, both sexes")

Share_Studs_PrivT <- UNESCO_Treatment(Share_Studs_Priv)
Share_Studs_PrivT <- Share_Studs_PrivT |> filter(Indicator =="Percentage of enrolment in lower secondary education in private institutions (%)")

Survival_RateT <- UNESCO_Treatment(Survival_Rate)
Survival_RateT <- Survival_RateT |> filter(Indicator == "Survival rate to the last grade of primary education, both sexes (%)")

EntranceAgeT <- UNESCO_Treatment(EntranceAge)
EntranceAgeTearly <- EntranceAgeT |> filter(Indicator == "Official entrance age to early childhood education (years)")

EntranceAgeT_Dev <- EntranceAgeT |> filter(Indicator == "Official entrance age to early childhood educational development (years)")

EntranceAgeTmanda <- EntranceAgeT |> filter(Indicator == "Official entrance age to compulsory education (years)")


```

I am uncertain as to what to do about the entrance age. In fact there two interesting variables. 
-> one on the age of compulsory education 
-> one on the age where schooling starts (like when you are 3 in France for instance)

There is one more country when testing between nb of tags in Mean Schooling and Gov Exp WE MIGHT NEED TO SEE ABOUT THAT. PERHAPS ADD THE MISSING COUNTRIES AS WE ANALYZE MORE VARS

```{r}
##inner_join()
```


Template to get 2009 and 2018 data 
## DATA_NAME2009 <- DATA |> filter (Time == 2009)
## DATA_NAME2018 <- DATA |> filter (Time == 2018)

Template to get the Country_Codes : Country_Code_test <- DATA |> distinct(LOCATION)

## World Bank Data
Some small changes in the csv file were needed again for the Fertility Rate data set to make it properly readable. Mostly, it required putting a _ on the variable names and getting rid of the first information provided in the .csv that were telling that it was WB data and its date of change. Once rid of these the file works. Otherwise we are doomed to commit some sort of felony.

There are only a few datasets from the WB treating them is quicker
```{r}
Fertility_Rate <- Fertility_Rate |> select("Country Name", "Country Code", "Indicator Name", "2009", "2012", "2015", "2018")
Pop_Density <- Pop_Density |> select(Country_Name, Country_Code, Indicator_Name, Y2009, Y2012, Y2015, Y2018) |> rename( "2009" ="Y2009", "2012"="Y2012", "2015"="Y2015", "2018"="Y2018")
```
The WB data are now ready for a first join.


## OECD (PISA) Data
<<<<<<< HEAD

=======
Pisa Score in the different domain, two kind of data, given also gender distribution
Small modifications in the csv files were necessary for R to identify variables properly. Gender specification or all students conditions were added to their average variables rather than being put separately.
getting rid of the ? in the datasets
>>>>>>> fa017f70e8442918af852a1f5271fdf5b4f5e477
```{r}
Pisa_score_Mathscale <- Pisa_score_Mathscale |> rename("Math_Score"="Average(all_students)") |> fill(`Year/Study`)|> select(-`Standard Error`)
Pisa_score_Mathscale_gender <- Pisa_score_Mathscale_gender |>  fill(`Year/Study`)|>select(-`Standard Error M`, -`Standard Error F`)
Pisa_score_readingscale <- Pisa_score_readingscale |> rename("Reading_Score"="Average(all_students)") |> fill(`Year/Study`) |>select(-`Standard Error`)
Pisa_score_readingscale_gender <- Pisa_score_readingscale_gender |> fill(`Year/Study`) |>select(-`Standard Error M`, -`Standard Error F`)
Pisa_score_Sciencescale <- Pisa_score_Sciencescale |> rename("Science_Score"="Average(all_students)") |> fill(`Year/Study`) |>select(-`Standard Error`)
Pisa_score_Sciencescale_gender <- Pisa_score_Sciencescale_gender |>  fill(`Year/Study`)|>select(-`Standard Error M`, -`Standard Error F`)


```
PISA data mostly need to have small changes as to how the score for each nations are named, so we can distinguish between Reading, Science and Math scores in the Final Dataset. Another thing that is necessary is to assign the proper year to each observations rather than just the first one for each year and have a look at the cases where the OECD suggested to keep the past data because they had non for that time of observation. 
Once all this is done we just need to join by country.

Here, we try getting rid of the '?' in the datasets, turning them into 'NA'

```{r}
Pisa_score_Mathscale$Math_Score <- iconv(Pisa_score_Mathscale$Math_Score, to="UTF-8", sub = NA)
Pisa_score_Mathscale_gender$Math_Score_M <- iconv(Pisa_score_Mathscale_gender$Math_Score_M, to="UTF-8", sub = NA)
Pisa_score_Mathscale_gender$Math_Score_F <- iconv(Pisa_score_Mathscale_gender$Math_Score_F, to="UTF-8", sub = NA)
Pisa_score_readingscale$Reading_Score <- iconv(Pisa_score_readingscale$Reading_Score, to="UTF-8", sub = NA)
Pisa_score_readingscale_gender$Reading_Score_M <- iconv(Pisa_score_readingscale_gender$Reading_Score_M, to="UTF-8", sub = NA)
Pisa_score_readingscale_gender$Reading_Score_F <- iconv(Pisa_score_readingscale_gender$Reading_Score_F, to="UTF-8", sub = NA)
Pisa_score_Sciencescale$Science_Score <- iconv(Pisa_score_Sciencescale$Science_Score, to="UTF-8", sub = NA)
Pisa_score_Sciencescale_gender$Science_Score_M <- iconv(Pisa_score_Sciencescale_gender$Science_Score_M, to="UTF-8", sub = NA)
Pisa_score_Sciencescale_gender$Science_Score_F <- iconv(Pisa_score_Sciencescale_gender$Science_Score_F, to="UTF-8", sub = NA)
```

Since all the data have a similar structure, we created a function that remove the last four observation and make the year as a numeric variable, this is to make further aggregation of the data easier. 
```{r}
PISA_treatment <- function(data) {
  if (nrow(data) <= 4) {
    warning("Number of observations to remove exceeds the total number of observations.")
    return(NULL)
  }
  modified_data <- head(data, -4)
  
  modified_data$`Year/Study` <- as.numeric(modified_data$`Year/Study`)
  
  return(modified_data)
}
```

Run this code only once, 
```{r}
Pisa_score_Mathscale <- PISA_treatment(Pisa_score_Mathscale)
Pisa_score_Mathscale_gender <-PISA_treatment(Pisa_score_Mathscale_gender)
Pisa_score_readingscale <- PISA_treatment(Pisa_score_readingscale)
Pisa_score_readingscale_gender <- PISA_treatment(Pisa_score_readingscale_gender)
Pisa_score_Sciencescale <- PISA_treatment(Pisa_score_Sciencescale)
Pisa_score_Sciencescale_gender <- PISA_treatment(Pisa_score_Sciencescale_gender)
```

Now we display the data properly and ready for the aggregation. 
```{r}
Pisa_score_Mathscale <- Pisa_score_Mathscale %>%
  pivot_wider(names_from = `Year/Study`, values_from = Math_Score)

Pisa_score_readingscale <- Pisa_score_readingscale %>%
  pivot_wider(names_from = `Year/Study`, values_from = Reading_Score)

Pisa_score_Sciencescale <- Pisa_score_Sciencescale %>%
  pivot_wider(names_from = `Year/Study`, values_from = Science_Score)
```

```{r}
Pisa_score_Mathscale_gender <- Pisa_score_Mathscale_gender %>%
  pivot_wider(names_from = `Year/Study`, 
              values_from = c(Math_Score_F, Math_Score_M),
              names_sep = "_")

Pisa_score_readingscale_gender <- Pisa_score_readingscale_gender %>%
  pivot_wider(names_from = `Year/Study`, 
              values_from = c(Reading_Score_F,Reading_Score_M),
              names_sep = "_")

Pisa_score_Sciencescale_gender <- Pisa_score_Sciencescale_gender %>%
  pivot_wider(names_from = `Year/Study`, 
              values_from = c(Science_Score_F, Science_Score_M),
              names_sep = "_")
```

<<<<<<< HEAD
there is still some cleaning to do, as some of the data take the form "name of country" (2015) and are to be accounted for as they are missing from the "normal" row of the countries. Good thing is that it is consistently the same issue with the same countries in all the datasets, namely (Albania, Argentina, Kazakhstan and Malaysia). In the end we commited another felony and got back each data csv and manually moved the (2015) data to the proper place) It will be important to account for this as they seem systematically above general averages for these countries. Which might explain why they were separated in the first place.



## Household income cleaning
we first remove some observation we are not interested in. we create a function that verifies that the column we want to remove are effectively all of NA values. eventually we removed the others cause not related to our analysis.
=======
## GNI_percapita cleaning. 
No particular cleaning done in the Household Income data, just a minor adjustment in the cvs file, in order to be readable in rstudio. 
The indicator columns is eliminated, as it is unnecessary for our analysis. 
```{r}
GNI_percapita <- GNI_percapita |>
  select(-`Indicator Code`)
```

### Presentation of the dataset and variable explainantion
>>>>>>> fa017f70e8442918af852a1f5271fdf5b4f5e477

```{r}
get_dataset_info <- function(dataset) {
  num_rows <- nrow(dataset)
  num_cols <- ncol(dataset)
  variable_names <- names(dataset)
  info_table <- data.frame(
    "Number of Rows" = num_rows,
    "Number of Columns" = num_cols,
    "Variable Names" = paste(variable_names, collapse = ", ")
  )
  return(info_table)
}
```

```{r}
result <- get_dataset_info(GNI_percapita)
names(result) <- c("Rows", "Columns", "Variable Names")
knitr::kable(result, caption = "Number of Rows, Number of Columns, Name of the Variable")
```
This indicator offers the per-person measurement of Gross National Income (GNI, previously known as GNP) in current international dollars, adjusted by a purchasing power parity (PPP) conversion factor. 
We decided to keep the Country Name and Country Code to identify unequivocally the countries. 
The Indicator name that define the type of measurement and lastly the observation from 2009 to 2022.
